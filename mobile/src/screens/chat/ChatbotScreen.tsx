import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TextInput,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import Colors from '@constants/colors';
import { spacing, fontSize, fontWeight, borderRadius } from '@constants/themes';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

const ChatbotScreen: React.FC<{ navigation: any }> = ({ navigation }) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Xin ch√†o! T√¥i l√† NutriBot ü§ñ\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:\n‚Ä¢ T∆∞ v·∫•n dinh d∆∞·ª°ng\n‚Ä¢ G·ª£i √Ω th·ª±c ƒë∆°n\n‚Ä¢ M·∫πo ƒÉn u·ªëng l√†nh m·∫°nh\n‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe\n\nB·∫°n c·∫ßn gi√∫p g√¨ h√¥m nay?',
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const flatListRef = useRef<FlatList>(null);

  const quickReplies = [
    'G·ª£i √Ω b·ªØa s√°ng l√†nh m·∫°nh',
    'T√¥i mu·ªën gi·∫£m c√¢n',
    'L√†m sao ƒë·ªÉ tƒÉng protein?',
    'M√≥n ƒÉn Vi·ªát Nam healthy',
  ];

  useEffect(() => {
    // Auto scroll to bottom when new message
    if (messages.length > 0) {
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: true });
      }, 100);
    }
  }, [messages]);

  const handleSend = async (text?: string) => {
    const messageText = text || inputText.trim();
    if (!messageText) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      text: messageText,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: generateAIResponse(messageText),
        isUser: false,
        timestamp: new Date(),
      };

      setMessages((prev) => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const generateAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes('b·ªØa s√°ng')) {
      return 'üç≥ G·ª£i √Ω b·ªØa s√°ng l√†nh m·∫°nh:\n\n1. Ph·ªü g√† kh√¥ng d·∫ßu m·ª° (350 kcal)\n2. B√°nh m√¨ nguy√™n c√°m v·ªõi tr·ª©ng (300 kcal)\n3. Y·∫øn m·∫°ch + chu·ªëi + s·ªØa chua (280 kcal)\n4. X√¥i ƒë·∫≠u ƒëen + ·ª©c g√† lu·ªôc (400 kcal)\n\nN√™n ƒÉn s√°ng trong v√≤ng 1 gi·ªù sau khi th·ª©c d·∫≠y nh√©! üòä';
    }

    if (lowerMessage.includes('gi·∫£m c√¢n')) {
      return 'üí™ ƒê·ªÉ gi·∫£m c√¢n hi·ªáu qu·∫£:\n\n1. ƒÇn deficiency 300-500 kcal/ng√†y\n2. TƒÉng protein (1.6-2g/kg)\n3. U·ªëng ƒë·ªß 2-3L n∆∞·ªõc/ng√†y\n4. T·∫≠p HIIT + gym 4-5 ng√†y/tu·∫ßn\n5. Ng·ªß ƒë·ªß 7-8 ti·∫øng\n\nQuan tr·ªçng nh·∫•t l√† ki√™n tr√¨! B·∫°n c√≥ th·ªÉ l√†m ƒë∆∞·ª£c! üî•';
    }

    if (lowerMessage.includes('protein')) {
      return 'ü•© Ngu·ªìn protein t·ªët cho ng∆∞·ªùi Vi·ªát:\n\n‚Ä¢ Th·ªãt g√†, b√≤, heo n·∫°c\n‚Ä¢ C√° (c√° h·ªìi, c√° ng·ª´, c√° thu)\n‚Ä¢ Tr·ª©ng g√†\n‚Ä¢ ƒê·∫≠u ph·ª•, ƒë·∫≠u n√†nh\n‚Ä¢ S·ªØa chua Hy L·∫°p\n‚Ä¢ H·∫°t ƒëi·ªÅu, h·∫°t h·∫°nh nh√¢n\n\nM·ª•c ti√™u: 1.6-2g protein/kg c∆° th·ªÉ/ng√†y üí™';
    }

    if (lowerMessage.includes('m√≥n vi·ªát')) {
      return 'üáªüá≥ M√≥n Vi·ªát Nam l√†nh m·∫°nh:\n\n1. G·ªèi cu·ªën t√¥m (120 kcal/roll)\n2. Ph·ªü b√≤ n·∫°c (350 kcal)\n3. B√∫n ch·∫£ √≠t d·∫ßu (450 kcal)\n4. C∆°m g√† lu·ªôc rau c·ªß (480 kcal)\n5. Canh chua c√° (200 kcal)\n\nM√≥n Vi·ªát r·∫•t healthy n·∫øu bi·∫øt c√°ch ch·∫ø bi·∫øn! üçú';
    }

    return 'ü§ñ T√¥i hi·ªÉu b·∫°n mu·ªën bi·∫øt v·ªÅ "' +
      userMessage +
      '".\n\nB·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ:\n‚Ä¢ G·ª£i √Ω m√≥n ƒÉn\n‚Ä¢ T√≠nh calories\n‚Ä¢ Ch·∫ø ƒë·ªô ƒÉn\n‚Ä¢ T·∫≠p luy·ªán\n\nT√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! üòä';
  };

  const renderMessage = ({ item }: { item: Message }) => (
    <View
      style={[
        styles.messageContainer,
        item.isUser ? styles.userMessageContainer : styles.aiMessageContainer,
      ]}
    >
      {!item.isUser && (
        <View style={styles.avatarContainer}>
          <Text style={styles.avatar}>ü§ñ</Text>
        </View>
      )}
      <View
        style={[
          styles.messageBubble,
          item.isUser ? styles.userMessageBubble : styles.aiMessageBubble,
        ]}
      >
        <Text style={[styles.messageText, item.isUser && styles.userMessageText]}>
          {item.text}
        </Text>
        <Text style={[styles.messageTime, item.isUser && styles.userMessageTime]}>
          {item.timestamp.toLocaleTimeString('vi-VN', {
            hour: '2-digit',
            minute: '2-digit',
          })}
        </Text>
      </View>
    </View>
  );

  return (
    <SafeAreaView style={styles.container} edges={['top']}>
      <KeyboardAvoidingView
        style={styles.container}
        behavior={Platform.OS === 'ios' ? 'padding' : undefined}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}
      >
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity onPress={() => navigation.goBack()}>
            <Ionicons name="arrow-back" size={24} color={Colors.text} />
          </TouchableOpacity>
          <View style={styles.headerInfo}>
            <Text style={styles.headerTitle}>NutriBot AI</Text>
            <Text style={styles.headerStatus}>
              {isTyping ? 'ƒêang so·∫°n tin...' : 'Tr·ª±c tuy·∫øn'}
            </Text>
          </View>
          <TouchableOpacity>
            <Ionicons name="ellipsis-vertical" size={24} color={Colors.text} />
          </TouchableOpacity>
        </View>

        {/* Messages */}
        <FlatList
          ref={flatListRef}
          data={messages}
          renderItem={renderMessage}
          keyExtractor={(item) => item.id}
          contentContainerStyle={styles.messagesList}
          showsVerticalScrollIndicator={false}
          onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}
        />

        {/* Typing Indicator */}
        {isTyping && (
          <View style={styles.typingContainer}>
            <View style={styles.avatarContainer}>
              <Text style={styles.avatar}>ü§ñ</Text>
            </View>
            <View style={styles.typingBubble}>
              <View style={styles.typingDot} />
              <View style={styles.typingDot} />
              <View style={styles.typingDot} />
            </View>
          </View>
        )}

        {/* Quick Replies */}
        {messages.length <= 2 && (
          <View style={styles.quickRepliesContainer}>
            <FlatList
              horizontal
              data={quickReplies}
              renderItem={({ item }) => (
                <TouchableOpacity
                  style={styles.quickReplyButton}
                  onPress={() => handleSend(item)}
                >
                  <Text style={styles.quickReplyText}>{item}</Text>
                </TouchableOpacity>
              )}
              keyExtractor={(item) => item}
              showsHorizontalScrollIndicator={false}
              contentContainerStyle={styles.quickRepliesList}
            />
          </View>
        )}

        {/* Input Bar */}
        <View style={styles.inputContainer}>
          <TouchableOpacity style={styles.iconButton}>
            <Ionicons name="add-circle-outline" size={24} color={Colors.primary} />
          </TouchableOpacity>
          <TextInput
            style={styles.input}
            placeholder="Nh·∫≠p tin nh·∫Øn..."
            placeholderTextColor={Colors.gray400}
            value={inputText}
            onChangeText={setInputText}
            multiline
            maxLength={500}
          />
          <TouchableOpacity
            style={[styles.sendButton, !inputText.trim() && styles.sendButtonDisabled]}
            onPress={() => handleSend()}
            disabled={!inputText.trim()}
          >
            <Ionicons
              name="send"
              size={20}
              color={inputText.trim() ? Colors.white : Colors.gray400}
            />
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: spacing.lg,
    backgroundColor: Colors.white,
    borderBottomWidth: 1,
    borderBottomColor: Colors.gray200,
  },
  headerInfo: {
    flex: 1,
    marginLeft: spacing.md,
  },
  headerTitle: {
    fontSize: fontSize.lg,
    fontWeight: fontWeight.bold,
    color: Colors.text,
  },
  headerStatus: {
    fontSize: fontSize.sm,
    color: Colors.success,
    marginTop: 2,
  },
  messagesList: {
    padding: spacing.lg,
  },
  messageContainer: {
    flexDirection: 'row',
    marginBottom: spacing.md,
    alignItems: 'flex-end',
  },
  userMessageContainer: {
    justifyContent: 'flex-end',
  },
  aiMessageContainer: {
    justifyContent: 'flex-start',
  },
  avatarContainer: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: Colors.gray100,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: spacing.sm,
  },
  avatar: {
    fontSize: 20,
  },
  messageBubble: {
    maxWidth: '75%',
    padding: spacing.md,
    borderRadius: borderRadius.lg,
  },
  userMessageBubble: {
    backgroundColor: Colors.primary,
    borderBottomRightRadius: 4,
  },
  aiMessageBubble: {
    backgroundColor: Colors.white,
    borderBottomLeftRadius: 4,
  },
  messageText: {
    fontSize: fontSize.md,
    color: Colors.text,
    lineHeight: 20,
  },
  userMessageText: {
    color: Colors.white,
  },
  messageTime: {
    fontSize: fontSize.xs,
    color: Colors.textSecondary,
    marginTop: spacing.xs,
    textAlign: 'right',
  },
  userMessageTime: {
    color: Colors.white,
    opacity: 0.8,
  },
  typingContainer: {
    flexDirection: 'row',
    paddingHorizontal: spacing.lg,
    paddingBottom: spacing.sm,
    alignItems: 'flex-end',
  },
  typingBubble: {
    flexDirection: 'row',
    backgroundColor: Colors.white,
    padding: spacing.md,
    borderRadius: borderRadius.lg,
    gap: spacing.xs,
  },
  typingDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: Colors.gray400,
  },
  quickRepliesContainer: {
    paddingVertical: spacing.sm,
  },
  quickRepliesList: {
    paddingHorizontal: spacing.lg,
    gap: spacing.sm,
  },
  quickReplyButton: {
    backgroundColor: Colors.white,
    paddingVertical: spacing.sm,
    paddingHorizontal: spacing.md,
    borderRadius: borderRadius.full,
    borderWidth: 1,
    borderColor: Colors.primary,
    marginRight: spacing.sm,
  },
  quickReplyText: {
    fontSize: fontSize.sm,
    color: Colors.primary,
    fontWeight: fontWeight.medium,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    padding: spacing.md,
    backgroundColor: Colors.white,
    borderTopWidth: 1,
    borderTopColor: Colors.gray200,
  },
  iconButton: {
    padding: spacing.sm,
  },
  input: {
    flex: 1,
    backgroundColor: Colors.gray100,
    borderRadius: borderRadius.lg,
    paddingHorizontal: spacing.md,
    paddingVertical: spacing.sm,
    fontSize: fontSize.md,
    maxHeight: 100,
    marginHorizontal: spacing.sm,
  },
  sendButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: Colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
  },
  sendButtonDisabled: {
    backgroundColor: Colors.gray300,
  },
});

export default ChatbotScreen;
